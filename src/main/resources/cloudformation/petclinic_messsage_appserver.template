{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Mappings": {
        "RegionMap": {
            "ap-northeast-1": {
                "AMI": "ami-dcfa4edd"
            },
            "ap-southeast-1": {
                "AMI": "ami-74dda626"
            },
            "eu-west-1": {
                "AMI": "ami-24506250"
            },
            "sa-east-1": {
                "AMI": "ami-3e3be423"
            },
            "us-east-1": {
                "AMI": "ami-7f418316"
            },
            "us-west-1": {
                "AMI": "ami-951945d0"
            },
            "us-west-2": {
                "AMI": "ami-5ec1673e"
            }
        }
    },
    "Outputs": {
        "AZ": {
            "Description": "Availability Zone of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "WebServer",
                    "AvailabilityZone"
                ]
            }
        },
        "InstanceId": {
            "Description": "InstanceId of the newly created EC2 instance",
            "Value": {
                "Ref": "WebServer"
            }
        },
        "PrivateDNS": {
            "Description": "Private DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "WebServer",
                    "PrivateDnsName"
                ]
            }
        },
        "PrivateIP": {
            "Description": "Private IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "WebServer",
                    "PrivateIp"
                ]
            }
        },
        "PublicDNS": {
            "Description": "Public DNSName of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "WebServer",
                    "PublicDnsName"
                ]
            }
        },
		
      "URL": {
            "Description": "URL of the deployed application",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "http://",
                        {
                            "Fn::GetAtt": [
                                "ApplicationElasticLB",
                                "DNSName"
                            ]
                        },
                        ":",
						{
							"Ref": "LBPort"
						
						},
						
						"/rest/v1/messages"
                    ]
                ]
            }
        }		,
		
		
        "PublicIP": {
            "Description": "Public IP address of the newly created EC2 instance",
            "Value": {
                "Fn::GetAtt": [
                    "WebServer",
                    "PublicIp"
                ]
            }
        }
    },
    "Parameters": {
	
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
			"Default" : "RSG_KEY",      
			"Type": "String"
        },
		
    "LBPort" : {
        "Description" : "Port number for the load balancer ",
        "Type" : "Number",
        "Default" : "20000"
    },		
		

    "Port1" : {
        "Description" : "Port number for 1st instance of oneaws server ",
        "Type" : "Number",
        "Default" : "20001"
    },
	
    "Port2" : {
        "Description" : "Port number for 2nd instance of oneaws server ",
        "Type" : "Number",
        "Default" : "20002"
    },
	
	"VpcId": {
		"Default": "vpc-8b48f1ef",
		"Type": "String"
	},	
	
	"DBHost": {
		"Type": "String"
	},	
	
	"DBPort": {
		"Default": "3306",
		"Type": "String"
	},
	
	
	"subnetA": {
		"Default": "subnet-7b24a11f",
		"Type": "String"
	},
	
	"subnetB": {
		"Default": "subnet-c829f6be",
		"Type": "String"
	}	


		
    },
    "Resources": {
	
	    "CfnUser" : {
	      "Type" : "AWS::IAM::User",
	      "Properties" : {
	        "Path": "/",
	        "Policies": [{
	          "PolicyName": "root",
	          "PolicyDocument": { "Statement":[{
	            "Effect":"Allow",
	            "Action"   : [
	              "cloudformation:DescribeStackResource",
	              "s3:GetObject"
	            ],
	            "Resource":"*"
	          }]}
	        }]
	      }
	    },

	    "HostKeys" : {
		      "Type" : "AWS::IAM::AccessKey",
		      "Properties" : {
		        "UserName" : {"Ref": "CfnUser"}
		      }
		    },
			
			
       "ApplicationElasticLB": {
            "Properties": {
                "Name": "ApplicationElasticLB",
                "Scheme": "internet-facing",
                "Subnets": [
                    {
                        "Ref": "subnetA"
                    },
                    {
                        "Ref": "subnetB"
                    }
                ]
            },
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer"
        },		
		
        "Listener": {
            "Properties": {
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "TargetGroupWeb"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationElasticLB"
                },
                "Port": { "Ref": "LBPort" },
                "Protocol": "HTTP"
            },
            "Type": "AWS::ElasticLoadBalancingV2::Listener"
        },

        "TargetGroupWeb": {
            "Properties": {
                "HealthCheckIntervalSeconds": "30",
                "HealthCheckProtocol": "HTTP",
                "HealthCheckTimeoutSeconds": "10",
                "HealthyThresholdCount": "4",
                "Matcher": {
                    "HttpCode": "200"
                },
                "Name": "WebTarget",
                "Port": {
                    "Ref": "LBPort"
                },
                "Protocol": "HTTP",
                "Targets": [
                    {
                        "Id": {
                            "Ref": "WebServer"
                        },
                        "Port": {
                            "Ref": "Port1"
                        }
                    },
                    {
                        "Id": {
                            "Ref": "WebServer"
                        },
                        "Port": {
                            "Ref": "Port2"
                        }
                    }					
                ],
                "UnhealthyThresholdCount": "3",
                "VpcId": {
                    "Ref": "VpcId"
                }
            },
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup"
        },		
			
       "InstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable SSH and HTTP access on the defined port",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": {
                            "Ref": "Port1"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "Port1"
                        }
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": {
                            "Ref": "LBPort"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "LBPort"
                        }
                    },
					
					
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": {
                            "Ref": "Port2"
                        },
                        "IpProtocol": "tcp",
                        "ToPort": {
                            "Ref": "Port2"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
   		
				
	
        "WebServer": {
		"Type": "AWS::EC2::Instance",
				"Metadata" : {
		
		
	        "AWS::CloudFormation::Init" : {
			
			
	          "config" : {
			  
			  
			  
	            "packages" : {
	              "yum" : {
	                "java-1.8.0-openjdk-devel":[],
	                "git":[]
	              }
	            }
				
				
				
	          }
	        }
	      },		
		  
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "RegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                    ]
                },
                "InstanceType": "t2.micro",
                "SecurityGroups": [
                    {
						"Ref": "InstanceSecurityGroup"
					}
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },		
					
		        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash \n",

					"yum update -y aws-cfn-bootstrap \n",
					"## Initialize CloudFormation bits \n",
					"/opt/aws/bin/cfn-init -v -s ", 
					{ "Ref" : "AWS::StackName" }, 
					" -r WebServer",
					"   --region ", { "Ref" : "AWS::Region" }, " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log) \n",				  
					"wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo \n",
					"sed -i s/\\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo \n",
					"yum install -y apache-maven \n",
					"export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-1.b15.25.amzn1.x86_64 \n",
					"export PATH=JAVA_HOME/bin:$PATH \n",
					"sudo mkdir /var/www/ \n",				  
					"sudo mkdir /var/www/oneawsmsg1 \n",
					"sudo mkdir /var/www/oneawsmsg2 \n",
					"sudo chown -R ec2-user:ec2-user /var/www/oneawsmsg1 \n",	
					"sudo chown -R ec2-user:ec2-user /var/www/oneawsmsg2 \n",						
					"git clone https://github.com/godbolerr/oneaws-petclinic-messages.git /var/www/oneawsmsg1 \n",
					"git clone https://github.com/godbolerr/oneaws-petclinic-messages.git /var/www/oneawsmsg2 \n",
					"cd /var/www/oneawsmsg1 \n",					
					"export SERVER_PORT=" ,  { "Ref" : "Port1" } ," \n",
					"mvn -Dserver.port=",  { "Ref" : "Port1" } , 
					" -Ddb.url=jdbc:mysql://",	{ "Ref" : "DBHost" }, ":" ,  { "Ref" : "DBPort" } , "/petclinicdb  spring-boot::run & \n",
					"cd /var/www/oneawsmsg2 \n",					
					"export SERVER_PORT=" ,  { "Ref" : "Port2" } ," \n",
					"mvn -Dserver.port=",  { "Ref" : "Port2" } , 					
					" -Ddb.url=jdbc:mysql://",	{ "Ref" : "DBHost" }, ":" ,  { "Ref" : "DBPort" } , "/petclinicdb  spring-boot::run & \n"
				]]}}
				
				
				
        }
	}
	
	}
}